--- 
title: "A Minimal Book Example"
author: "Leo Ohyama"
date: "`r Sys.Date()`"
site: bookdown::bookdown_site
documentclass: book
bibliography: [book.bib, packages.bib]
# url: your book url like https://bookdown.org/yihui/bookdown
# cover-image: path to the social sharing image like images/cover.jpg
description: |
  This is a minimal example of using the bookdown package to write a book.
  The HTML output format for this example is bookdown::gitbook,
  set in the _output.yml file.
link-citations: yes
github-repo: rstudio/bookdown-demo
---

# About

This is a _sample_ book written in **Markdown**. You can use anything that Pandoc's Markdown supports; for example, a math equation $a^2 + b^2 = c^2$.

## Usage 

Each **bookdown** chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter *must* start with a first-level heading: `# A good chapter`, and can contain one (and only one) first-level heading.

Use second-level and higher headings within chapters like: `## A short section` or `### An even shorter section`.

The `index.Rmd` file is required, and is also your first book chapter. It will be the homepage when you render the book.

## Render book

You can render the HTML version of this example book without changing anything:

1. Find the **Build** pane in the RStudio IDE, and

1. Click on **Build Book**, then select your output format, or select "All formats" if you'd like to use multiple formats from the same book source files.

Or build the book from the R console:

```{r, eval=FALSE}
bookdown::render_book()
```

To render this example to PDF as a `bookdown::pdf_book`, you'll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): <https://yihui.org/tinytex/>.

## Preview book

As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in "Preview book", or from the R console:

```{r eval=FALSE}
bookdown::serve_book()
```


```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
```

<!--chapter:end:index.Rmd-->

`# A good chapter 1`
---
title: "Module 1"
author: "Leo Ohyama"
date: "Last Updated `r format(Sys.time(), '%d %B, %Y')`"
output: rmdformats::downcute 
---

## Introduction to Data Visualization

We will practice plotting data using the iris dataset.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE,
                      message = FALSE, fig.align = "center",
                      fig.width = 10,
                      fig.height = 8)
```

```{r}
data(iris) # load data (already exists in base R)
```
```{r, warning=FALSE}
head(iris)
```


### Continuous Variables

#### Scatterplots with base R

Plotting sepal length by width

```{r, warning=FALSE}
plot(Sepal.Length~Sepal.Width, data=iris)
```

Specify colors using the "col =" argument within the plot function wrapper.

```{r}
plot(Sepal.Length~Sepal.Width, data=iris, col="blue")
```

We can get more complex by specifying solid dots with separate colors for each species.

```{r, warning=FALSE}
plot(Sepal.Length~Sepal.Width, data=iris, 
     pch=16, col=c("red","blue","purple")[iris$Species] ) 
```

We can specify to plot only one species by editing the "data=" argument. The "==" in the code means "exactly equals". Using just "=" will not work. 

```{r, warning=FALSE}
### plot only the data for Iris virginica
plot(Sepal.Length~Sepal.Width, data=iris[iris$Species=='virginica',]) ## use brackets to select the columns you want
```

Finally, we can add a  standard linear trendline across the data.

```{r, warning=FALSE}
plot(Sepal.Length~Sepal.Width, data=iris[iris$Species=='virginica',])
abline(lm(Sepal.Length~Sepal.Width,
          data=iris[iris$Species=='virginica',]))  ## adds line from lm
```

#### Scatterplots with ggplot2

We need the tidyverse package to use ggplot2.

```{r}
library(tidyverse) ## install tidyverse if necessary
```

Let's start with a simple plot of sepal length by width

```{r}
ggplot(data=iris, 
       aes(x=Sepal.Width, 
           y=Sepal.Length)) +              
  geom_point() 
```

We can also add colors to the points just liek base R using the "color = " argument within the geom_point function.

```{r}
ggplot(data=iris, aes(x=Sepal.Width, 
                      y=Sepal.Length)) +                                               geom_point(color='blue') 
```

We can also color the points by species by including the "color = " argument within the aes() wrapper in the first ggplot line. aes() sets the aesthetics of the plot based on the data that is being used. The data is specified with the "data = ".

```{r}
ggplot(data=iris, aes(x=Sepal.Width, 
                      y=Sepal.Length, 
                      color=Species)) +
  geom_point() 
```

What if we want to see the different species in different plot panels? We can do this by using facet_wrap(). facet_wrap() allows you to facet the plot by a a categorical variable from the dataset. In the example below, we facet the plot above by species.

```{r}
ggplot(data=iris, aes(x=Sepal.Width, 
                      y=Sepal.Length, 
                      color=Species)) +
  geom_point() +
  facet_wrap(~Species) 
```

Now finally let's redo the plots we did in base R. Let's first plot only one species. We can do this by manipulating the data set being used within the "data = " argument. We filter the original dataset "iris" so that only a specific species is being used in the plot.

```{r}
ggplot(data=iris %>% filter(Species=='virginica'),
       aes(x=Sepal.Width, 
           y=Sepal.Length)) +                                       
  geom_point() +
  labs(title = "Plot with only Virginica") #we can add a title to the plot using the labs() and specifying the "title =" argument
```

Now let's plot the data with a linear trendline. To do this we use geom_smooth(). Within geom_smooth() we use the argument "method = " to specify the type of trendline. Since we want a linear one based on a linear model we use "lm".

```{r, message=FALSE}
ggplot(data=iris %>% filter(Species=='virginica'), 
       aes(x=Sepal.Width, 
           y=Sepal.Length)) +                                         
  geom_point() +
  geom_smooth(method='lm')
```

We can also add a separate trendline for all three species. ggplot2 can do this in a very user friendly way. By specifying different colors for different species in the first ggplot() line, the usage of geom_smooth() automatically applies the categorization by colors to the trendlines resulting in separate trendlines for each species.

```{r}
ggplot(data=iris, aes(x=Sepal.Width,
                      y=Sepal.Length, 
                      color=Species)) +
  geom_point() +
  geom_smooth(method='lm')
```

If we move the "color = " argument to the outside of the aes() and just specify a single color. it changes the colors of all points.

```{r}
ggplot(data=iris, aes(x=Sepal.Width,
                      y=Sepal.Length)) + 
  geom_point(color="blue") +   
  facet_wrap(~Species) +
  geom_smooth(method='lm')
```


### Fancy Scatterplots

For more appealing color options we use the viridis package

```{r}
library(viridis) ## install viridis package if necassary
```

Let's set up a basic plot from the examples shown above. The default colors work fine but could be better and the plot background could also be cleaner and more improved.

```{r}
ggplot(data=iris, aes(x=Sepal.Width, 
                      y=Sepal.Length, color=Species)) +
  geom_point() + 
  geom_smooth(method='lm')
```

We can change the background elements of the plot (a.k.a the "theme") with preset defaults such as theme_bw()

```{r}
ggplot(data=iris, 
       aes(x=Sepal.Width, 
           y=Sepal.Length, 
           color=Species)) +
  geom_point() + 
  geom_smooth(method='lm') +
  theme_bw()
```

We can also change the size of the points by adding a "size = " argument in the geom_point(). Also, the colors can be improved (e.g. making them more color-blind friendly) by using the scale_color_virdis(). Within the virdis function, we specify that we want a discrete color scale with "discreet = TRUE".

```{r}
ggplot(data=iris, aes(x=Sepal.Width, 
                      y=Sepal.Length, color=Species)) +
  geom_point(size=3) + # change point size to make them bigger
  geom_smooth(method='lm') + 
  scale_color_viridis(discrete = TRUE) + # change points to a color-blind friendly palette. Can specify specific colors
  theme_bw() # new theme

```

We can change the shapes of the points based on species with the "shape = " argument in the first ggplot() line. We specify that this argument equals "Species" which basically means, set different shapes for different species. We can further specify which shapes we want for the three species with the scale_shape_manual().

```{r}
ggplot(data=iris, aes(x=Sepal.Width,
                      y=Sepal.Length,
                      shape=Species)) +
  geom_point(size=3) + 
  geom_smooth(method='lm') +                               
  scale_shape_manual(values=c("circle","square","triangle")) +
  theme_bw()
```

Let's specify with colors and shapes. Here's an annotated code chunk to show exactly what components are being specified for the plot. 

```{r}
ggplot(data=iris, aes(x=Sepal.Width, #Sets x axis variable
                      y=Sepal.Length, #Sets y axis variable
                      shape=Species, #use different shapes for species
                      color=Species #use different colors for species
                      )) +          
  geom_point(size=3) + #set size if points
  geom_smooth(method='lm') +  #set a linear model trendline           
  scale_color_viridis(discrete=T) + #color palette
  scale_shape_manual(values=c("circle","square","triangle")) + #specify which shapes       
  theme_bw() #different more black and white theme

```

We can also facet the plot above and increase the font size

```{r}
ggplot(data=iris, aes(x=Sepal.Width, 
                      y=Sepal.Length,
                      shape=Species,
                      color=Species)) + 
  geom_point(size=3) + 
  geom_smooth(method='lm') +    
  scale_color_viridis(discrete=T) +  
  scale_shape_manual(values=c("circle","square","triangle")) +      
  facet_wrap(~Species) + #facet by species
  theme_bw(base_size = 14) # increase font size for the entire plot

```

### Continuous Variables

#### Boxplots with base R

This line of code will make a simple boxplot. Notice the usage of "~". To avoid errors, make sure your continuous variable comes before "~" and your categorical variable comes after.

```{r}
plot(Sepal.Length~Species, data=iris) #make boxplot
```

We can add colors to the different boxplots

```{r}
plot(Sepal.Length~Species, data=iris, col=c("red","blue","purple")) #make boxplot with color
```


### Different types of plots for categorical data with ggplot2

To make a boxplot with ggplot we use geom_boxplot().
```{r}
ggplot(iris, aes(x=Species, #variable on x axis
                 y=Sepal.Length #variable on y axis
                 )) + 
  geom_boxplot() #specify boxplot option
```

We can also overlay points on the boxplot. 

```{r}
ggplot(iris, aes(x=Species,
                 y=Sepal.Length
                 )) + 
  geom_boxplot() + 
  geom_point()
```

To more clearly assess the scatter of the points we can jitter their position with geom_jitter()

```{r}
ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_boxplot() + 
  geom_jitter()
```

We may want to adjust how much jitter we give the points. This can be done with the "height = " and "width = " arguments. 
  
```{r}
ggplot(iris, aes(x=Species, 
                 y=Sepal.Length)) +
  geom_boxplot(outlier.shape=NA) + 
  geom_jitter(height=0, width=.15)
```

We can also make dot plots for the data using geom_dotplot().

```{r}
ggplot(iris, aes(x=Species, 
                 y=Sepal.Length)) + 
  geom_dotplot(binaxis = "y", stackdir = "center") 
```

There are also violin plots with geom_violin().

```{r}
ggplot(iris, aes(x=Species, y=Sepal.Length)) + 
  geom_violin(trim=F)  

```

A combination of violin plots with dot plots is also possible.

```{r}
ggplot(iris, aes(x=Species, y=Sepal.Length)) + 
  geom_violin(trim=F) + 
  geom_dotplot(binaxis = "y", stackdir = "center") 
```

Finally, we can also do violin plots with boxplots!
```{r}
ggplot(iris, aes(x=Species, y=Sepal.Length)) + 
  geom_violin(trim=F, bw=.5) + 
  geom_boxplot(width=.1)
```

#### Adding colors and summary statistics (e.g. averages) to plots

Let's change the color of the boxes. Note we don't use the "color = " argument but instead use the "fill = " argument. This is because fill will affect the fill color inside the box while color will affect the color of the border of the box. As such, when we use the viridis function for the nicer colors, we specify scale_fill_virdis rather than scale_color_virdis.

```{r}
ggplot(iris, aes(x=Species, 
                 y=Sepal.Length, 
                 fill=Species)) + 
  geom_boxplot(outlier.shape=NA) + 
  geom_jitter(height=0, width=.15) + 
  scale_fill_viridis(discrete=T) 
```

If we want to see the averages or means per species we can do this by using stat_summary() and specifying "mean" with the "fun = " argument.

```{r}
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + 
  geom_boxplot(outlier.shape=NA) + 
  geom_jitter(height=0, width=.15) + 
  scale_fill_viridis(discrete=T)  +             
  stat_summary(fun=mean, geom="point", size=4, color="red") ## add point for mean
```

Let's edit the theme of the plot above

```{r}
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + 
  geom_boxplot(outlier.shape=NA) + 
  geom_jitter(height=0, width=.15) + 
  scale_fill_viridis(discrete=T)  +             
  stat_summary(fun=mean, geom="point", size=4, color="red") +
  theme_bw(base_size = 16) #theme change
```

To save a plot like this as a .tiff we should first assign the plot as an object. In the example below we assign is as an object called "plot1" using the "<-". 

```{r}
plot1 <- ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) +  ## plot now saved as object called 'plot1'
  geom_boxplot(outlier.shape=NA) + 
  geom_jitter(height=0, width=.15) + 
  scale_fill_viridis(discrete=T)  +             
  stat_summary(fun=mean, geom="point", size=3, color="red") +
  theme_bw(base_size = 16) 
```

Then we use ggsave() to save the plot into whatever working directory you are using. We can set the dimensions of the image and we specify the plot we want to save using "plot1".

```{r}
ggsave("ExamplePlot.tiff", #file name to be used
       plot1, #what plot being saved
       width=4, #width
       height=3, #height
       units="in", #units being used for width and height
       dpi=300) #resolution of photo, higher number = better
```


### Breakout group challenge

For this challenge use the mtcars dataset:

```{r}
data(mtcars)
head(mtcars)
```


1. Plot x=mpg by y=hp  
2. Color code points by wt
3. Add trendline. Make the background white. theme_bw is okay, if time try playing around with other themes.
4. Make a boxplot of mpg for the three cyl groups. You should have three boxes. If only one, why?
5. Change colors, themes, add datapoints, etc.

## Introduction to Regression

### An Example of Linear Regression in R

For this section we will use the tidyverse and car package. The functon to actually run a linear regression (lm()) is built into the base R libraries

```{r}
library(tidyverse)
library(car)
```

We should also set a seed to make things reproducible. This is because for this section we will generate random numbers to create a dataset that we can use to apply a linear model to. Because we want to make sure that the same random numbers are generated for all who use this, we can do this by setting a seed. If everyone uses the same seed they will get the same random numbers that are generated from the following code:
```{r}
#Set Seed
set.seed(21)
```

```{r}
# Generate random data
temp <- round(runif(20,12,30), 2)            
mass <- round(rnorm(20,5*temp,25), 2)
r1 <- as.data.frame(cbind(temp,mass)) 
```

This is the random data set:
```{r}
head(r1)
```

Temp would represent rearing temperature in celsius and mass is the mass of adults in milligrams. Let's plot this data

```{r}
ggplot(r1, aes(x=temp, y=mass))+
  geom_point()+
  theme_bw()

```

Now let's construct a linear model to estimate the average adult mass per degree C of temperature increase. For a continuous variable (temp in celsius), we are interested in estimating the slope between mass and temperature.

We can set up the model using lm(). The varibale specified before "~" is your response (mass in this case) and the variable specified after is your predictor (temperature in this case).

```{r}
lm1 <- lm(mass~temp, data=r1) # all  "calculations" are saved in an object we called 'lm1'

```

We can construct an ANOVA table of this model. The ANOVA table tests the null hypothesis that the slope is different than zero. It's not not super useful for regressions but useful to look at.

```{r}
Anova(lm1, type=2)  
```

To see the summary of the model (e.g. model coefficients) we use summary()

```{r}
summary(lm1)
```

The coefficients allow you rebuild the means from the linear model equation:
$$y = \beta _0 + \beta _1X $$
For continuous variables these coefficients and p-values are very useful (unlike for categorical ANOVA). Ultimately, you don't really need to look at ANOVA table or use emmeans for this type of analysis, everything of interest is in summary.

We can also look at the model coefficients with coef() or we can actually index the coefficients by using lm1$coef.

```{r}
coef(lm1)
lm1$coef   
```

We can make a plot with the best-fit regression line and intercept.

```{r}
ggplot(r1, aes(x=temp, y=mass))+
  geom_point(size=3)+
  geom_smooth(method="lm")+
  theme_bw()
```

To check assumptions of the model, we examine residuals.

We can check normality of residuals with a histogram.
```{r}
hist(lm1$residuals)
```

We can check the homogenity of the residuals by plotting the residuals against the model's fitted values. The residuals should be evenly dispersed around 0 across the range of x's. Funnel shapes or curvature in the dispersion would indicate violations. 

```{r}
plot(lm1$residuals~lm1$fitted.values) 
abline(h=0)  
```

Using the car package we can also make a qqplot. Residuals should line up pretty closely to the blue line and points that drift from line may be outliers.
```{r}
qqPlot(lm1$residuals)
```

To find out which specific points are outliers we can use leveragePlots().

```{r}
leveragePlots(lm1) # codes points that may be outliers
```

Problems with residuals indicate assumptions of the linear model are violated and may cause problems with coefficients and p-values. To alleviate potential issues transforming the data may help. It's useful to note that assumptions can be slightly violated without causing problems.

We can also make a fancy plot of this model.

```{r}
ggplot(r1, aes(x=temp,
               y=mass)) +
  geom_point(size=3,color='blue') +
  geom_smooth(method='lm') +
  labs(x = "Temperature", y = "Mass") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold", size = 14)) 
```

### Regression Challenge

Run the code shown above to answer questions regarding the orange dataset. The dataset has measurements of circumference on five trees at 7 time points.

```{r}
data("Orange")  ## load Orange dataset from base R
head(Orange)  
```

Healthy orange trees typically produce fruit at 100 cm in circumference. A homeowner calls and says their orange tree is 3 years old (1095 days), but isn't fruiting. They didn't measure it. They also said their are some white spots on the leaves. 

Build a linear model (and make plot) to answer the following questions.

1. What circumference should their tree be, on average?
2. Should their tree be fruiting by now? 
3. What advice would you give the grower?
4. Are the model assumptions met?
5. Make a nice figure.

## Introduction to ANOVA

Let's load the necessary packages

```{r}
library(tidyverse)
library(car) 
library(emmeans)     # emmeans package, which is helpful for getting means from linear models
```

### Example of a one-way ANOVA in R

For this section we will use the insect spray dataset

```{r}
data("InsectSprays")
head(InsectSprays)
```

Let's filter to just 4 treatments.

```{r}
d <- InsectSprays %>% filter(spray=='A'|spray=='B'|spray=='C'|spray=='F') %>%
  droplevels()

```

Now plot the data.

```{r}
ggplot(d, aes(x=spray,y=count)) + 
  geom_boxplot(outlier.shape = NA) + # need to suppress outliers if you jitter plot points
  geom_jitter(height=0,width=.1) 
```

Let's construct linear model to examine the effect of the different sprays on insect counts. For a categorical variable (spray with four levels), we are interested in comparing group means.

```{r}
lm1 <- lm(count~spray, data=d) 
```

To compare group means we can use the Anova().

```{r}
Anova(lm1, type=2) 
```

In the above case, the null hypothesis that all group means are equal. Specifying the argument, "type = ", to 2 provides Type II sums of squares, which is usually better than the default Type I, especially for more complicated models. Other functions (anova(), aov(), etc.) will provide similar ANOVA tables, but the Anova() is more flexible.

Let's look at the summary of the model. 

```{r}
summary(lm1)
```

Rebuilding the model from the coefficients is not super helpful and the p-values aren't very meaningful.

Let's use the package emmeans and the function emmeans which will rebuild the model for you. It will print off the means, SE, and confidence intervals for each treatment group

```{r}
emmeans(lm1, ~spray) 
```
We can also look at pairwise differences between groups and automatically adjust p-values using "tukey" adjust. 

```{r}
emmeans(lm1, pairwise~spray) 
```

We should also check assumptions of the model.

```{r}
hist(lm1$residuals) ## residuals should be normally distributed
plot(lm1$residuals~lm1$fitted.values)  ## residuals should be evenly dispersed
abline(h=0)                           
```

```{r}
qqPlot(lm1$residuals)
```

Boxplots of residuals across treatment types should show that the variances should be homogeneous for each group.

```{r}
boxplot(lm1$residuals ~ d$spray)  
```

Problems with residuals indicate assumptions of the linear model are violated and may cause problems with coefficients and p-values. Transforming the data or using a different type of model may help (we will return to this example later in the course to improve it). Once again, assumptions can be slightly violated without causing problems, for example this model is seems passable but could be better. It is best practice to be transparent with residual diagnostics. 


### ANOVA Challenge 

Have a look at the dataset below. Baby chickens were fed different diets and they were weighed after 10 days. The variable 'weight' is the weight of a baby chicken (g); 'feed' is the type of type of diet the chicken was fed.

```{r}
d1 <- chickwts
head(d1)
```

1. Construct a linear model to analyze the data. Is there evidence at least one mean is different than another?

2. How much variation in the data does the model explain?

3. The feed 'casein' is the standard chicken diet. What types of feed are significantly worse than 'casein'. By how much are they worse?

4. Are the assumptions met?

5. Make a nice looking figure. show all the data.

# Extra Data Visualization

This section covers some more advanced plotting with ggplots

Let's load the necessary libraries or packages

```{r}
library(tidyverse)
library(emmeans)
```


### Adding averages to plots part 2 

In the previous section of data visualization we learned how to create a boxplot with averages based on species

```{r}
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + geom_boxplot(outlier.shape=NA) + 
  geom_jitter(height=0, width=.15) + 
  scale_fill_manual(values=c("#E69F00", "#56B4E9", "#009E73"))  +     
  stat_summary(fun=mean, geom="point", size=5, color="red")
```

We can  construct a linear model to estimate means and standard errors of the means for plotting. First we construct the model.

```{r}
sl1 <- lm(Sepal.Length~Species, data=iris)
```

Then we use emmeans() to calculate the means and also pipe it as a data.frame.

```{r}
sl_means <- emmeans(sl1, ~Species) %>% as.data.frame() ## saves emmeans as dataframe
head(sl_means)
```

With the object sl_means we can make barplots with standard error bars.

```{r}
ggplot(sl_means, aes(x=Species, y=emmean)) + 
  geom_bar(stat="identity", color="black", fill='grey') + 
  geom_errorbar(aes(ymin=(emmean-SE), ymax=(emmean+SE)), width=.2)
```

We can tidy up the plot.

```{r}
ggplot(data = sl_means, 
       aes(x=Species, y=emmean)) +
  geom_bar(stat="identity", 
           color="black", 
           fill='grey', 
           width=.5) + 
  geom_errorbar(aes(ymin=(emmean-SE), 
                    ymax=(emmean+SE)),
                width=.2) + ## make bars thinner
  geom_hline(yintercept = 0) + 
  theme(panel.background = element_blank(), 
        panel.border = element_rect(color="black",
                                    fill=NA, 
                                    size=2)) +            ## change "theme" so the background is blank and the border is thicker
  theme(axis.ticks.length=unit(0.3, "cm"),  
        axis.text.x = element_text(margin=margin(5,5,5,5,"pt"),colour="black"),
        axis.text.y = element_text(margin=margin(5,5,5,5,"pt"),colour="black")) +  ## change axis tick marks to make them a little longer
  theme(text = element_text(size=20)) 
```

We can also add points to the barplot.

```{r}
ggplot() + 
  geom_bar(data=sl_means, 
           aes(x=Species, y=emmean), 
           stat="identity", 
           color="black", 
           fill='grey', 
           width=.5) + 
  geom_errorbar(data=sl_means ,
                aes(x=Species, 
                    y=emmean, 
                    ymin=(emmean-SE), 
                    ymax=(emmean+SE)), 
                width=.2) + ## make bars thinner
  geom_jitter(data=iris, 
              aes(x=Species,
                  y=Sepal.Length), 
              height=0, 
              width=.15) +
  theme(panel.background = element_blank(),  
        panel.border = element_rect(color="black", 
                                    fill=NA, 
                                    size=2)) +            ## change "theme" so the background is blank and the border is thicker
  theme(axis.ticks.length=unit(0.3, "cm"),  
        axis.text.x = element_text(margin=margin(5,5,5,5,"pt"),
                                   colour="black"),
        axis.text.y = element_text(margin=margin(5,5,5,5,"pt"),
                                   colour="black")) +  ## change axis tick marks to make them a little longer
  theme(text = element_text(size=20)) 
```

We can also try a dot plot with standard error bars.

```{r}
ggplot() + 
  geom_jitter(data=iris,
              aes(x=Species,
                  y=Sepal.Length), 
              height=0, 
              width=.1) +
  geom_point(data=sl_means, 
             aes(x=Species, y=emmean),
             color="red", 
             size=5) + 
  geom_errorbar(data=sl_means,
                aes(x=Species,
                    y=emmean, 
                    ymin=(emmean-SE), 
                    ymax=(emmean+SE)), 
                width=.2, 
                color="red", 
                lwd=2) + ## make bars thinner
  theme(panel.background = element_blank(), 
        panel.border = element_rect(color="black", 
                                    fill=NA, 
                                    size=2)) +            ## change "theme" so the background is blank and the border is thicker
  theme(axis.ticks.length=unit(0.3, "cm"),  
        axis.text.x = element_text(margin=margin(5,5,5,5,"pt"),colour="black"),
        axis.text.y = element_text(margin=margin(5,5,5,5,"pt"),colour="black")) +  ## change axis tick marks to make them a little longer
  theme(text = element_text(size=20)) 
```

### R Challenge

From R file 1c_R Intro_anova #5. Make a nice looking plot that includes the mean and SE of chick weight for the six feeds.

Try making a boxplot with jittered points and then overlay the mean +/- SE in a large dot of a different color.

Try changing the color of each box. Customize the colors, themes, etc. to make it look nice and readable.







<!--chapter:end:01-Module_1.Rmd-->

`# A good chapter 2`
---
title: "Module 2"
author: "Leo Ohyama"
date: "Last Updated `r format(Sys.time(), '%d %B, %Y')`"
output: rmdformats::downcute 
---

## 2A. Data Management Part 1

We will practice plotting data using the iris dataset.

We will use the iris dataset for this section

```{r}
data(iris) # load data (already exists in base R)
```

```{r}
head(iris) # print first 6 lines of dataset
tail(iris) # print last 6 lines of dataset
```

```{r}
str(iris) # print 'structure' of dataset giving you info about each column
```

### Making and modifying variables

Here's how we make a new column that is a unique number:
```{r}
iris$Plant <- 1:length(iris$Species)
```

Here's how we make a new column that is total petal and sepal length:
```{r}
iris$PetSep.Length <- iris$Petal.Length+iris$Sepal.Length
```

Here's how to make a new column that log-transforms PetSep.Length:
iris$lnPS.Len <- log(iris$PetSep.Length)
```{r}
iris$lnPS.Len <- log(iris$PetSep.Length)
```

Here's how to make a new column for 'genus'. The only values you want is "Iris":
```{r}
iris$Genus <- 'Iris'
```

Here's how to combine two columns:
```{r}
iris$GenSpp <- paste(iris$Genus, iris$Species, sep="_")
```



Here's how to change Species 'versicolor' to 'versi' in the GenSpp column:
```{r}
iris$GenSpp <- gsub('versicolor', 'versi', iris$GenSpp )  ## looks for 'versicolor' and replaces it with 'versi' in the column iris$Species
```

sub() can be used for replacement but will only do 1 replacement and gsub() can also be used for replacement but with all matching instances.

You can use gsub() to add genus name to species column (alternative to making new column and then pasting together).
```{r}
iris$GenSpp1 <- gsub('.*^', 'Iris_', iris$Species)
```


### Variables with the tidyverse

```{r}
library(tidyverse)      # load package tidyverse (install if needed)
library(viridis)
data(iris)               # reload iris to clear changes from above
iris1 <- as_tibble(iris) # load iris and convert to tibble
```

```{r}
glimpse(iris1)     ## similar to str(), just glimpses data
```

mutate() will allow you create and modify variables:
```{r}
iris1 <- iris1 %>% mutate(Plant=1:length(Species), 
                          PetSep.Length=Petal.Length+Sepal.Length, 
                          lnPS.Len=log(PetSep.Length), 
                          Genus='Iris', 
                          GenSpp=gsub('.*^', 'Iris_', Species)) 
        ## note that I am overwriting iris1. Use with caution
```

summarize() calculates means, sd, min, max, etc. on a dataset
```{r}
iris1 %>% summarize(mean(Petal.Length))  ## mean of Petal.Length in dplyr
```

```{r}
mean(iris1$Petal.Length) ## mean of Petal.Length in base R
```

Here we summarize lnPS.Len by Species with both Tidyverse and base R:
```{r}
means_PetLen1 <- iris1 %>% group_by(Species) %>%
  summarize(Petal.Length=mean(Petal.Length)) ## tidy code
```

```{r}
means_PetLen2 <- aggregate(Petal.Length~Species, FUN="mean", data=iris1) ## base R
```

Here we summarize multiple variables by species use summarize_all()
```{r}
means1 <- iris1 %>% 
  select(Sepal.Length, Sepal.Width, Petal.Length,
         Petal.Width,lnPS.Len, Species) %>%  
  group_by(Species) %>% 
  summarize_all(list(mean=mean,sd=sd,n=length))
means1
```

### Reshape data for better usability 

Here is how we reshape data from wide to long:
```{r}
iris_long <- iris1 %>% group_by(Species) %>% 
  pivot_longer(cols=c(Sepal.Length, Sepal.Width, Petal.Length,
                      Petal.Width, lnPS.Len), 
               names_to = 'Trait', 
               values_to = 'value')
head(iris_long)
```

We can calculate the mean, sd, and n for each Species X trait combo and then calculate SE:
```{r}
means2 <- iris_long %>% 
  group_by(Species,Trait) %>% 
  summarize(mean=mean(value), 
            sd=sd(value), 
            n=length(value)) %>% 
  mutate(se=sd/sqrt(n)) %>%
  filter(Trait!='lnPS.Len')
head(means2)
```

Note that the previous code could all be done in one piped command:
```{r}
means2a <- iris1 %>% 
  group_by(Species) %>% 
  pivot_longer(cols=c(Sepal.Length, Sepal.Width, Petal.Length,
                      Petal.Width, lnPS.Len), names_to = 'Trait',
               values_to = 'value') %>% 
  group_by(Species,Trait) %>% 
  summarize(mean=mean(value), 
            sd=sd(value),
            n=length(value)) %>% 
  mutate(se=sd/sqrt(n)) %>%
  filter(Trait!='lnPS.Len')
means2a
```

We can make plot, below are two plots to start with. One is ineffective and one is more effective.
```{r}
ggplot(data=means2, aes(x=Species, y=mean, fill=Trait)) + 
  geom_point(size=5, position=position_dodge(width=0.25), pch=22) +
  labs(y="Floral part measurement (mm)") +
  geom_errorbar(aes(ymin=(mean-sd), ymax=(mean+sd)), width=.2,
                position=position_dodge(width=0.25), lwd=1.5) +
  scale_fill_viridis(discrete = T, 
                     labels=c("Petal Length","Petal Width",
                              "Sepal Length", "Sepal Width"),
                     option="magma") +
  theme(panel.border=element_rect(color="black",size=2, fill=NA)) +
  xlab("Species")
```

```{r}
ggplot(data=iris_long %>% 
         filter(Trait!='lnPS.Len'), aes(x=Species, 
                                        y=value, 
                                        fill=Species)) + 
  geom_boxplot() + 
  facet_wrap(~Trait, scales = 'free_y') +
  labs(y="Floral part measurement (mm)") +
  scale_fill_viridis(discrete = T, 
                     option = "plasma", 
                     direction = -1, begin=.2) +
  theme_bw()
```

## 2B. Data Management Part 2

We are still using the Iris data set as well as the tidyverse.
```{r}
library(tidyverse)
library(viridis)
iris1 <- as_tibble(iris) # load iris and convert to tibble
```


Here we make plot of sepal.length by sepal.width in wide format:
```{r}
ggplot(data=iris1, aes(x=Sepal.Width, y=Sepal.Length)) + 
  geom_point(color="#39568CFF") +   ## color outside of aes() changes color of all points (ie. not mapped to a column)
  facet_wrap(~Species) +
  geom_smooth(method='lm',color="#39568CFF", fill="#39568CFF")+
  theme_bw()
```

We can reshape data for for comparing traits in different panels:
```{r}
### reshape data from wide to long
iris_long <- iris1 %>% group_by(Species) %>% 
  pivot_longer(cols=c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), names_to = 'Trait', values_to = 'value')
head(iris_long)
```

Now we make a plot comparing species with traits on different panels:
```{r}
ggplot(data=iris_long , aes(x=Species, y=value, fill=Species)) + 
  geom_boxplot() + 
  facet_wrap(~Trait, scales = 'free_y') +
  labs(y="Floral part measurement (mm)") +
  scale_fill_viridis(discrete = T, 
                     option = "plasma", 
                     direction = -1) +
  theme_bw()
```

## 2C. Data Exploration

For data exploration we need to load the following libraries:
```{r}
library(tidyverse) 
library(agridat)
library(corrplot) 
library(EnvStats) 
```

We will use the Iris dataset.
```{r}
data(iris) # load data (already exists in base R)
iris[8,3] <- 7 # plant data point for demo
head(iris) # print first 6 lines of dataset
tail(iris) # print last 6 lines of dataset
```

Here we use str() to print the 'structure' of dataset giving you info about each column or we can use glimpse().
```{r}
str(iris)
```
```{r}
glimpse(iris) # glimpse is similar to str() in tidyverse
```

### Distributions & summary statistics

We can view histograms of petal lengths with this:
```{r}
ggplot(iris, aes(x = Petal.Length)) + 
  geom_histogram(bins=12, color="white") +
  theme_bw(base_size = 16) +
  geom_vline(aes(xintercept = mean(Petal.Length)),
             color = "blue",
             size = 2) +
  geom_vline(aes(xintercept= median(Petal.Length)), 
             color = "orange", 
             size = 2)
```

We can also facet the histograms:
```{r}
ggplot(iris, aes(x = Petal.Length)) + 
  geom_histogram(bins=12, color="white") + 
  facet_wrap(~Species, scales="free") + 
  theme_bw(base_size = 16)

```

We can use the summary() to examine mean, median, and ranges. 
```{r}
summary(iris)
```

We can also get a table of means and medians with this tidyverse code:
```{r}
iris %>%
  pivot_longer(cols=c(1:4)) %>% 
  group_by(Species,name) %>% 
  summarize(mean=mean(value),median=median(value)) 
```

### Examining for outliers 

Boxplots can be used to examine distribution and look for outliers:
```{r}
ggplot(iris, aes(x=Species, y = Petal.Length)) + 
  geom_boxplot(fill="grey", width=.5) + 
  facet_wrap(~Species, scales="free") + 
  theme_bw(base_size = 16)
```

We can also use a dixon test for outliers or other tests like the grubbs test or Rosner test (for multiple outliers):
```{r}
library(outliers)
```

```{r}
## grubbs test for outliers, highest then lowest. Other functions EnvStats::rosnerTest() can test for multiple outliers
grubbs.test(iris$Petal.Length) ## full dataset
grubbs.test(iris$Petal.Length[iris$Species=='setosa']) ## just species setosa
grubbs.test(iris$Petal.Length[iris$Species=='setosa'], opposite=T) ## test lower outlier for species setosa
```

Here we can remove outliers and remake boxplots. Filtering with "|" (OR) will select all observations where one condition is met but not the other. 
```{r}
iris1 <- iris %>% filter(Petal.Length<4 | !Species=='setosa')
```

Ploting data:
```{r}
ggplot(iris1, aes(x=Species, y = Petal.Length)) + 
  geom_boxplot(fill="grey", width=.5) + 
  facet_wrap(~Species, scales="free") + 
  theme_bw(base_size = 16)
```

### Explore relationships

We can first use the GGally package. The ggpairs() code provides us with scatter plots that plot variables against one another in a pairwise fashion. We also see the distribution of the data and the correlation coefficients between a pair of variables

```{r}
library(GGally) ## install and load GGally package, if necessary
```

```{r}
ggpairs(iris1)   ## Make a big panel plot for exploration!!!
ggpairs(iris1, aes(color=Species, alpha=.75)) ## add color to seperate by species
```

Alternative to ggpairs() is the cor() which can be better for quickly scanning complex datasets:
```{r}
iris_cor <- cor(iris1 %>% select(-Species) %>% as.matrix()) ## first make correlation matrix
corrplot(iris_cor, method = "circle", type = "upper") ## plots strength of correlation as color-coded circles

```



<!--chapter:end:02-Module_2.Rmd-->

