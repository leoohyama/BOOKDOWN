[["index.html", "Statistics in R Chapter 1 About 1.1 Usage 1.2 Render book 1.3 Preview book", " Statistics in R Phil Hahn &amp; Leo Ohyama 2022-06-03 Chapter 1 About This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 1.1 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 1.2 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select “All formats” if you’d like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you’ll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 1.3 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book,” or from the R console: bookdown::serve_book() "],["module-1.html", "Chapter 2 Module 1 2.1 1A. Introduction to Data Visualization 2.2 1B. Introduction to Regression 2.3 1C. Introduction to ANOVA 2.4 Extra Data Visualization", " Chapter 2 Module 1 2.1 1A. Introduction to Data Visualization We will practice plotting data using the iris dataset. data(iris) # load data (already exists in base R) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa 2.1.1 Continuous Variables 2.1.1.1 Scatterplots with base R Plotting sepal length by width plot(Sepal.Length~Sepal.Width, data=iris) Specify colors using the “col =” argument within the plot function wrapper. plot(Sepal.Length~Sepal.Width, data=iris, col=&quot;blue&quot;) We can get more complex by specifying solid dots with separate colors for each species. plot(Sepal.Length~Sepal.Width, data=iris, pch=16, col=c(&quot;red&quot;,&quot;blue&quot;,&quot;purple&quot;)[iris$Species] ) We can specify to plot only one species by editing the “data=” argument. The “==” in the code means “exactly equals.” Using just “=” will not work. ### plot only the data for Iris virginica plot(Sepal.Length~Sepal.Width, data=iris[iris$Species==&#39;virginica&#39;,]) ## use brackets to select the columns you want Finally, we can add a standard linear trendline across the data. plot(Sepal.Length~Sepal.Width, data=iris[iris$Species==&#39;virginica&#39;,]) abline(lm(Sepal.Length~Sepal.Width, data=iris[iris$Species==&#39;virginica&#39;,])) ## adds line from lm 2.1.1.2 Scatterplots with ggplot2 We need the tidyverse package to use ggplot2. library(tidyverse) ## install tidyverse if necessary Let’s start with a simple plot of sepal length by width ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length)) + geom_point() We can also add colors to the points just liek base R using the “color =” argument within the geom_point function. ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length)) + geom_point(color=&#39;blue&#39;) We can also color the points by species by including the “color =” argument within the aes() wrapper in the first ggplot line. aes() sets the aesthetics of the plot based on the data that is being used. The data is specified with the “data =.” ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) + geom_point() What if we want to see the different species in different plot panels? We can do this by using facet_wrap(). facet_wrap() allows you to facet the plot by a a categorical variable from the dataset. In the example below, we facet the plot above by species. ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) + geom_point() + facet_wrap(~Species) Now finally let’s redo the plots we did in base R. Let’s first plot only one species. We can do this by manipulating the data set being used within the “data =” argument. We filter the original dataset “iris” so that only a specific species is being used in the plot. ggplot(data=iris %&gt;% filter(Species==&#39;virginica&#39;), aes(x=Sepal.Width, y=Sepal.Length)) + geom_point() + labs(title = &quot;Plot with only Virginica&quot;) #we can add a title to the plot using the labs() and specifying the &quot;title =&quot; argument Now let’s plot the data with a linear trendline. To do this we use geom_smooth(). Within geom_smooth() we use the argument “method =” to specify the type of trendline. Since we want a linear one based on a linear model we use “lm.” ggplot(data=iris %&gt;% filter(Species==&#39;virginica&#39;), aes(x=Sepal.Width, y=Sepal.Length)) + geom_point() + geom_smooth(method=&#39;lm&#39;) We can also add a separate trendline for all three species. ggplot2 can do this in a very user friendly way. By specifying different colors for different species in the first ggplot() line, the usage of geom_smooth() automatically applies the categorization by colors to the trendlines resulting in separate trendlines for each species. ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) + geom_point() + geom_smooth(method=&#39;lm&#39;) If we move the “color =” argument to the outside of the aes() and just specify a single color. it changes the colors of all points. ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length)) + geom_point(color=&quot;blue&quot;) + facet_wrap(~Species) + geom_smooth(method=&#39;lm&#39;) 2.1.2 Fancy Scatterplots For more appealing color options we use the viridis package library(viridis) ## install viridis package if necassary Let’s set up a basic plot from the examples shown above. The default colors work fine but could be better and the plot background could also be cleaner and more improved. ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) + geom_point() + geom_smooth(method=&#39;lm&#39;) We can change the background elements of the plot (a.k.a the “theme”) with preset defaults such as theme_bw() ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) + geom_point() + geom_smooth(method=&#39;lm&#39;) + theme_bw() We can also change the size of the points by adding a “size =” argument in the geom_point(). Also, the colors can be improved (e.g. making them more color-blind friendly) by using the scale_color_virdis(). Within the virdis function, we specify that we want a discrete color scale with “discreet = TRUE.” ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, color=Species)) + geom_point(size=3) + # change point size to make them bigger geom_smooth(method=&#39;lm&#39;) + scale_color_viridis(discrete = TRUE) + # change points to a color-blind friendly palette. Can specify specific colors theme_bw() # new theme We can change the shapes of the points based on species with the “shape =” argument in the first ggplot() line. We specify that this argument equals “Species” which basically means, set different shapes for different species. We can further specify which shapes we want for the three species with the scale_shape_manual(). ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, shape=Species)) + geom_point(size=3) + geom_smooth(method=&#39;lm&#39;) + scale_shape_manual(values=c(&quot;circle&quot;,&quot;square&quot;,&quot;triangle&quot;)) + theme_bw() Let’s specify with colors and shapes. Here’s an annotated code chunk to show exactly what components are being specified for the plot. ggplot(data=iris, aes(x=Sepal.Width, #Sets x axis variable y=Sepal.Length, #Sets y axis variable shape=Species, #use different shapes for species color=Species #use different colors for species )) + geom_point(size=3) + #set size if points geom_smooth(method=&#39;lm&#39;) + #set a linear model trendline scale_color_viridis(discrete=T) + #color palette scale_shape_manual(values=c(&quot;circle&quot;,&quot;square&quot;,&quot;triangle&quot;)) + #specify which shapes theme_bw() #different more black and white theme We can also facet the plot above and increase the font size ggplot(data=iris, aes(x=Sepal.Width, y=Sepal.Length, shape=Species, color=Species)) + geom_point(size=3) + geom_smooth(method=&#39;lm&#39;) + scale_color_viridis(discrete=T) + scale_shape_manual(values=c(&quot;circle&quot;,&quot;square&quot;,&quot;triangle&quot;)) + facet_wrap(~Species) + #facet by species theme_bw(base_size = 14) # increase font size for the entire plot 2.1.3 Continuous Variables 2.1.3.1 Boxplots with base R This line of code will make a simple boxplot. Notice the usage of “~.” To avoid errors, make sure your continuous variable comes before “~” and your categorical variable comes after. plot(Sepal.Length~Species, data=iris) #make boxplot We can add colors to the different boxplots plot(Sepal.Length~Species, data=iris, col=c(&quot;red&quot;,&quot;blue&quot;,&quot;purple&quot;)) #make boxplot with color 2.1.4 Different types of plots for categorical data with ggplot2 To make a boxplot with ggplot we use geom_boxplot(). ggplot(iris, aes(x=Species, #variable on x axis y=Sepal.Length #variable on y axis )) + geom_boxplot() #specify boxplot option We can also overlay points on the boxplot. ggplot(iris, aes(x=Species, y=Sepal.Length )) + geom_boxplot() + geom_point() To more clearly assess the scatter of the points we can jitter their position with geom_jitter() ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_boxplot() + geom_jitter() We may want to adjust how much jitter we give the points. This can be done with the “height =” and “width =” arguments. ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_boxplot(outlier.shape=NA) + geom_jitter(height=0, width=.15) We can also make dot plots for the data using geom_dotplot(). ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) There are also violin plots with geom_violin(). ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_violin(trim=F) A combination of violin plots with dot plots is also possible. ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_violin(trim=F) + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) Finally, we can also do violin plots with boxplots! ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_violin(trim=F, bw=.5) + geom_boxplot(width=.1) 2.1.4.1 Adding colors and summary statistics (e.g. averages) to plots Let’s change the color of the boxes. Note we don’t use the “color =” argument but instead use the “fill =” argument. This is because fill will affect the fill color inside the box while color will affect the color of the border of the box. As such, when we use the viridis function for the nicer colors, we specify scale_fill_virdis rather than scale_color_virdis. ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + geom_boxplot(outlier.shape=NA) + geom_jitter(height=0, width=.15) + scale_fill_viridis(discrete=T) If we want to see the averages or means per species we can do this by using stat_summary() and specifying “mean” with the “fun =” argument. ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + geom_boxplot(outlier.shape=NA) + geom_jitter(height=0, width=.15) + scale_fill_viridis(discrete=T) + stat_summary(fun=mean, geom=&quot;point&quot;, size=4, color=&quot;red&quot;) ## add point for mean Let’s edit the theme of the plot above ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + geom_boxplot(outlier.shape=NA) + geom_jitter(height=0, width=.15) + scale_fill_viridis(discrete=T) + stat_summary(fun=mean, geom=&quot;point&quot;, size=4, color=&quot;red&quot;) + theme_bw(base_size = 16) #theme change To save a plot like this as a .tiff we should first assign the plot as an object. In the example below we assign is as an object called “plot1” using the “&lt;-.” plot1 &lt;- ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + ## plot now saved as object called &#39;plot1&#39; geom_boxplot(outlier.shape=NA) + geom_jitter(height=0, width=.15) + scale_fill_viridis(discrete=T) + stat_summary(fun=mean, geom=&quot;point&quot;, size=3, color=&quot;red&quot;) + theme_bw(base_size = 16) Then we use ggsave() to save the plot into whatever working directory you are using. We can set the dimensions of the image and we specify the plot we want to save using “plot1.” ggsave(&quot;ExamplePlot.tiff&quot;, #file name to be used plot1, #what plot being saved width=4, #width height=3, #height units=&quot;in&quot;, #units being used for width and height dpi=300) #resolution of photo, higher number = better 2.1.5 Breakout group challenge For this challenge use the mtcars dataset: data(mtcars) head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 Plot x=mpg by y=hp Color code points by wt Add trendline. Make the background white. theme_bw is okay, if time try playing around with other themes. Make a boxplot of mpg for the three cyl groups. You should have three boxes. If only one, why? Change colors, themes, add datapoints, etc. 2.2 1B. Introduction to Regression 2.2.1 An Example of Linear Regression in R For this section we will use the tidyverse and car package. The functon to actually run a linear regression (lm()) is built into the base R libraries library(tidyverse) library(car) We should also set a seed to make things reproducible. This is because for this section we will generate random numbers to create a dataset that we can use to apply a linear model to. Because we want to make sure that the same random numbers are generated for all who use this, we can do this by setting a seed. If everyone uses the same seed they will get the same random numbers that are generated from the following code: #Set Seed set.seed(21) # Generate random data temp &lt;- round(runif(20,12,30), 2) mass &lt;- round(rnorm(20,5*temp,25), 2) r1 &lt;- as.data.frame(cbind(temp,mass)) This is the random data set: head(r1) ## temp mass ## 1 26.15 73.83 ## 2 16.54 101.64 ## 3 24.59 109.24 ## 4 15.32 80.91 ## 5 29.27 160.42 ## 6 28.54 180.50 Temp would represent rearing temperature in celsius and mass is the mass of adults in milligrams. Let’s plot this data ggplot(r1, aes(x=temp, y=mass))+ geom_point()+ theme_bw() Now let’s construct a linear model to estimate the average adult mass per degree C of temperature increase. For a continuous variable (temp in celsius), we are interested in estimating the slope between mass and temperature. We can set up the model using lm(). The varibale specified before “~” is your response (mass in this case) and the variable specified after is your predictor (temperature in this case). lm1 &lt;- lm(mass~temp, data=r1) # all &quot;calculations&quot; are saved in an object we called &#39;lm1&#39; We can construct an ANOVA table of this model. The ANOVA table tests the null hypothesis that the slope is different than zero. It’s not not super useful for regressions but useful to look at. Anova(lm1, type=2) ## Anova Table (Type II tests) ## ## Response: mass ## Sum Sq Df F value Pr(&gt;F) ## temp 13001 1 23.137 0.0001403 *** ## Residuals 10114 18 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 To see the summary of the model (e.g. model coefficients) we use summary() summary(lm1) ## ## Call: ## lm(formula = mass ~ temp, data = r1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -50.349 -13.588 0.361 15.668 45.873 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 9.8626 20.0788 0.491 0.62922 ## temp 4.3716 0.9088 4.810 0.00014 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.7 on 18 degrees of freedom ## Multiple R-squared: 0.5624, Adjusted R-squared: 0.5381 ## F-statistic: 23.14 on 1 and 18 DF, p-value: 0.0001403 The coefficients allow you rebuild the means from the linear model equation: \\[y = \\beta _0 + \\beta _1X \\] For continuous variables these coefficients and p-values are very useful (unlike for categorical ANOVA). Ultimately, you don’t really need to look at ANOVA table or use emmeans for this type of analysis, everything of interest is in summary. We can also look at the model coefficients with coef() or we can actually index the coefficients by using lm1$coef. coef(lm1) ## (Intercept) temp ## 9.862553 4.371578 lm1$coef ## (Intercept) temp ## 9.862553 4.371578 We can make a plot with the best-fit regression line and intercept. ggplot(r1, aes(x=temp, y=mass))+ geom_point(size=3)+ geom_smooth(method=&quot;lm&quot;)+ theme_bw() To check assumptions of the model, we examine residuals. We can check normality of residuals with a histogram. hist(lm1$residuals) We can check the homogenity of the residuals by plotting the residuals against the model’s fitted values. The residuals should be evenly dispersed around 0 across the range of x’s. Funnel shapes or curvature in the dispersion would indicate violations. plot(lm1$residuals~lm1$fitted.values) abline(h=0) Using the car package we can also make a qqplot. Residuals should line up pretty closely to the blue line and points that drift from line may be outliers. qqPlot(lm1$residuals) ## [1] 1 6 To find out which specific points are outliers we can use leveragePlots(). leveragePlots(lm1) # codes points that may be outliers Problems with residuals indicate assumptions of the linear model are violated and may cause problems with coefficients and p-values. To alleviate potential issues transforming the data may help. It’s useful to note that assumptions can be slightly violated without causing problems. We can also make a fancy plot of this model. ggplot(r1, aes(x=temp, y=mass)) + geom_point(size=3,color=&#39;blue&#39;) + geom_smooth(method=&#39;lm&#39;) + labs(x = &quot;Temperature&quot;, y = &quot;Mass&quot;) + theme_bw() + theme(axis.title = element_text(face = &quot;bold&quot;, size = 14)) 2.2.2 Regression Challenge Run the code shown above to answer questions regarding the orange dataset. The dataset has measurements of circumference on five trees at 7 time points. data(&quot;Orange&quot;) ## load Orange dataset from base R head(Orange) ## Grouped Data: circumference ~ age | Tree ## Tree age circumference ## 1 1 118 30 ## 2 1 484 58 ## 3 1 664 87 ## 4 1 1004 115 ## 5 1 1231 120 ## 6 1 1372 142 Healthy orange trees typically produce fruit at 100 cm in circumference. A homeowner calls and says their orange tree is 3 years old (1095 days), but isn’t fruiting. They didn’t measure it. They also said their are some white spots on the leaves. Build a linear model (and make plot) to answer the following questions. What circumference should their tree be, on average? Should their tree be fruiting by now? What advice would you give the grower? Are the model assumptions met? Make a nice figure. 2.3 1C. Introduction to ANOVA Let’s load the necessary packages library(tidyverse) library(car) library(emmeans) # emmeans package, which is helpful for getting means from linear models 2.3.1 Example of a one-way ANOVA in R For this section we will use the insect spray dataset data(&quot;InsectSprays&quot;) head(InsectSprays) ## count spray ## 1 10 A ## 2 7 A ## 3 20 A ## 4 14 A ## 5 14 A ## 6 12 A Let’s filter to just 4 treatments. d &lt;- InsectSprays %&gt;% filter(spray==&#39;A&#39;|spray==&#39;B&#39;|spray==&#39;C&#39;|spray==&#39;F&#39;) %&gt;% droplevels() Now plot the data. ggplot(d, aes(x=spray,y=count)) + geom_boxplot(outlier.shape = NA) + # need to suppress outliers if you jitter plot points geom_jitter(height=0,width=.1) Let’s construct linear model to examine the effect of the different sprays on insect counts. For a categorical variable (spray with four levels), we are interested in comparing group means. lm1 &lt;- lm(count~spray, data=d) To compare group means we can use the Anova(). Anova(lm1, type=2) ## Anova Table (Type II tests) ## ## Response: count ## Sum Sq Df F value Pr(&gt;F) ## spray 1648.73 3 26.478 6.091e-10 *** ## Residuals 913.25 44 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 In the above case, the null hypothesis that all group means are equal. Specifying the argument, “type =,” to 2 provides Type II sums of squares, which is usually better than the default Type I, especially for more complicated models. Other functions (anova(), aov(), etc.) will provide similar ANOVA tables, but the Anova() is more flexible. Let’s look at the summary of the model. summary(lm1) ## ## Call: ## lm(formula = count ~ spray, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -8.3333 -2.3750 -0.5833 2.0625 9.3333 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 14.5000 1.3152 11.025 3.02e-14 *** ## sprayB 0.8333 1.8599 0.448 0.656 ## sprayC -12.4167 1.8599 -6.676 3.42e-08 *** ## sprayF 2.1667 1.8599 1.165 0.250 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.556 on 44 degrees of freedom ## Multiple R-squared: 0.6435, Adjusted R-squared: 0.6192 ## F-statistic: 26.48 on 3 and 44 DF, p-value: 6.091e-10 Rebuilding the model from the coefficients is not super helpful and the p-values aren’t very meaningful. Let’s use the package emmeans and the function emmeans which will rebuild the model for you. It will print off the means, SE, and confidence intervals for each treatment group emmeans(lm1, ~spray) ## spray emmean SE df lower.CL upper.CL ## A 14.50 1.32 44 11.849 17.15 ## B 15.33 1.32 44 12.683 17.98 ## C 2.08 1.32 44 -0.567 4.73 ## F 16.67 1.32 44 14.016 19.32 ## ## Confidence level used: 0.95 We can also look at pairwise differences between groups and automatically adjust p-values using “tukey” adjust. emmeans(lm1, pairwise~spray) ## $emmeans ## spray emmean SE df lower.CL upper.CL ## A 14.50 1.32 44 11.849 17.15 ## B 15.33 1.32 44 12.683 17.98 ## C 2.08 1.32 44 -0.567 4.73 ## F 16.67 1.32 44 14.016 19.32 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df t.ratio p.value ## A - B -0.833 1.86 44 -0.448 0.9697 ## A - C 12.417 1.86 44 6.676 &lt;.0001 ## A - F -2.167 1.86 44 -1.165 0.6518 ## B - C 13.250 1.86 44 7.124 &lt;.0001 ## B - F -1.333 1.86 44 -0.717 0.8899 ## C - F -14.583 1.86 44 -7.841 &lt;.0001 ## ## P value adjustment: tukey method for comparing a family of 4 estimates We should also check assumptions of the model. hist(lm1$residuals) ## residuals should be normally distributed plot(lm1$residuals~lm1$fitted.values) ## residuals should be evenly dispersed abline(h=0) qqPlot(lm1$residuals) ## [1] 45 46 Boxplots of residuals across treatment types should show that the variances should be homogeneous for each group. boxplot(lm1$residuals ~ d$spray) Problems with residuals indicate assumptions of the linear model are violated and may cause problems with coefficients and p-values. Transforming the data or using a different type of model may help (we will return to this example later in the course to improve it). Once again, assumptions can be slightly violated without causing problems, for example this model is seems passable but could be better. It is best practice to be transparent with residual diagnostics. 2.3.2 ANOVA Challenge Have a look at the dataset below. Baby chickens were fed different diets and they were weighed after 10 days. The variable ‘weight’ is the weight of a baby chicken (g); ‘feed’ is the type of type of diet the chicken was fed. d1 &lt;- chickwts head(d1) ## weight feed ## 1 179 horsebean ## 2 160 horsebean ## 3 136 horsebean ## 4 227 horsebean ## 5 217 horsebean ## 6 168 horsebean Construct a linear model to analyze the data. Is there evidence at least one mean is different than another? How much variation in the data does the model explain? The feed ‘casein’ is the standard chicken diet. What types of feed are significantly worse than ‘casein.’ By how much are they worse? Are the assumptions met? Make a nice looking figure. show all the data. 2.4 Extra Data Visualization This section covers some more advanced plotting with ggplots Let’s load the necessary libraries or packages library(tidyverse) library(emmeans) 2.4.1 Adding averages to plots part 2 In the previous section of data visualization we learned how to create a boxplot with averages based on species ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) + geom_boxplot(outlier.shape=NA) + geom_jitter(height=0, width=.15) + scale_fill_manual(values=c(&quot;#E69F00&quot;, &quot;#56B4E9&quot;, &quot;#009E73&quot;)) + stat_summary(fun=mean, geom=&quot;point&quot;, size=5, color=&quot;red&quot;) We can construct a linear model to estimate means and standard errors of the means for plotting. First we construct the model. sl1 &lt;- lm(Sepal.Length~Species, data=iris) Then we use emmeans() to calculate the means and also pipe it as a data.frame. sl_means &lt;- emmeans(sl1, ~Species) %&gt;% as.data.frame() ## saves emmeans as dataframe head(sl_means) ## Species emmean SE df lower.CL upper.CL ## 1 setosa 5.006 0.07280222 147 4.862126 5.149874 ## 2 versicolor 5.936 0.07280222 147 5.792126 6.079874 ## 3 virginica 6.588 0.07280222 147 6.444126 6.731874 With the object sl_means we can make barplots with standard error bars. ggplot(sl_means, aes(x=Species, y=emmean)) + geom_bar(stat=&quot;identity&quot;, color=&quot;black&quot;, fill=&#39;grey&#39;) + geom_errorbar(aes(ymin=(emmean-SE), ymax=(emmean+SE)), width=.2) We can tidy up the plot. ggplot(data = sl_means, aes(x=Species, y=emmean)) + geom_bar(stat=&quot;identity&quot;, color=&quot;black&quot;, fill=&#39;grey&#39;, width=.5) + geom_errorbar(aes(ymin=(emmean-SE), ymax=(emmean+SE)), width=.2) + ## make bars thinner geom_hline(yintercept = 0) + theme(panel.background = element_blank(), panel.border = element_rect(color=&quot;black&quot;, fill=NA, size=2)) + ## change &quot;theme&quot; so the background is blank and the border is thicker theme(axis.ticks.length=unit(0.3, &quot;cm&quot;), axis.text.x = element_text(margin=margin(5,5,5,5,&quot;pt&quot;),colour=&quot;black&quot;), axis.text.y = element_text(margin=margin(5,5,5,5,&quot;pt&quot;),colour=&quot;black&quot;)) + ## change axis tick marks to make them a little longer theme(text = element_text(size=20)) We can also add points to the barplot. ggplot() + geom_bar(data=sl_means, aes(x=Species, y=emmean), stat=&quot;identity&quot;, color=&quot;black&quot;, fill=&#39;grey&#39;, width=.5) + geom_errorbar(data=sl_means , aes(x=Species, y=emmean, ymin=(emmean-SE), ymax=(emmean+SE)), width=.2) + ## make bars thinner geom_jitter(data=iris, aes(x=Species, y=Sepal.Length), height=0, width=.15) + theme(panel.background = element_blank(), panel.border = element_rect(color=&quot;black&quot;, fill=NA, size=2)) + ## change &quot;theme&quot; so the background is blank and the border is thicker theme(axis.ticks.length=unit(0.3, &quot;cm&quot;), axis.text.x = element_text(margin=margin(5,5,5,5,&quot;pt&quot;), colour=&quot;black&quot;), axis.text.y = element_text(margin=margin(5,5,5,5,&quot;pt&quot;), colour=&quot;black&quot;)) + ## change axis tick marks to make them a little longer theme(text = element_text(size=20)) We can also try a dot plot with standard error bars. ggplot() + geom_jitter(data=iris, aes(x=Species, y=Sepal.Length), height=0, width=.1) + geom_point(data=sl_means, aes(x=Species, y=emmean), color=&quot;red&quot;, size=5) + geom_errorbar(data=sl_means, aes(x=Species, y=emmean, ymin=(emmean-SE), ymax=(emmean+SE)), width=.2, color=&quot;red&quot;, lwd=2) + ## make bars thinner theme(panel.background = element_blank(), panel.border = element_rect(color=&quot;black&quot;, fill=NA, size=2)) + ## change &quot;theme&quot; so the background is blank and the border is thicker theme(axis.ticks.length=unit(0.3, &quot;cm&quot;), axis.text.x = element_text(margin=margin(5,5,5,5,&quot;pt&quot;),colour=&quot;black&quot;), axis.text.y = element_text(margin=margin(5,5,5,5,&quot;pt&quot;),colour=&quot;black&quot;)) + ## change axis tick marks to make them a little longer theme(text = element_text(size=20)) 2.4.2 R Challenge From R file 1c_R Intro_anova #5. Make a nice looking plot that includes the mean and SE of chick weight for the six feeds. Try making a boxplot with jittered points and then overlay the mean +/- SE in a large dot of a different color. Try changing the color of each box. Customize the colors, themes, etc. to make it look nice and readable. "],["module-2.html", "Chapter 3 Module 2 3.1 2A. Data Management Part 1 3.2 2B. Data Management Part 2 3.3 2C. Data Exploration", " Chapter 3 Module 2 3.1 2A. Data Management Part 1 We will practice plotting data using the iris dataset. We will use the iris dataset for this section data(iris) # load data (already exists in base R) head(iris) # print first 6 lines of dataset ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa tail(iris) # print last 6 lines of dataset ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica str(iris) # print &#39;structure&#39; of dataset giving you info about each column ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 3.1.1 Making and modifying variables Here’s how we make a new column that is a unique number: iris$Plant &lt;- 1:length(iris$Species) Here’s how we make a new column that is total petal and sepal length: iris$PetSep.Length &lt;- iris$Petal.Length+iris$Sepal.Length Here’s how to make a new column that log-transforms PetSep.Length: iris\\(lnPS.Len &lt;- log(iris\\)PetSep.Length) iris$lnPS.Len &lt;- log(iris$PetSep.Length) Here’s how to make a new column for ‘genus.’ The only values you want is “Iris”: iris$Genus &lt;- &#39;Iris&#39; Here’s how to combine two columns: iris$GenSpp &lt;- paste(iris$Genus, iris$Species, sep=&quot;_&quot;) Here’s how to change Species ‘versicolor’ to ‘versi’ in the GenSpp column: iris$GenSpp &lt;- gsub(&#39;versicolor&#39;, &#39;versi&#39;, iris$GenSpp ) ## looks for &#39;versicolor&#39; and replaces it with &#39;versi&#39; in the column iris$Species sub() can be used for replacement but will only do 1 replacement and gsub() can also be used for replacement but with all matching instances. You can use gsub() to add genus name to species column (alternative to making new column and then pasting together). iris$GenSpp1 &lt;- gsub(&#39;.*^&#39;, &#39;Iris_&#39;, iris$Species) 3.1.2 Variables with the tidyverse library(tidyverse) # load package tidyverse (install if needed) library(viridis) data(iris) # reload iris to clear changes from above iris1 &lt;- as_tibble(iris) # load iris and convert to tibble glimpse(iris1) ## similar to str(), just glimpses data ## Rows: 150 ## Columns: 5 ## $ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.… ## $ Sepal.Width &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.… ## $ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.… ## $ Petal.Width &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.… ## $ Species &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s… mutate() will allow you create and modify variables: iris1 &lt;- iris1 %&gt;% mutate(Plant=1:length(Species), PetSep.Length=Petal.Length+Sepal.Length, lnPS.Len=log(PetSep.Length), Genus=&#39;Iris&#39;, GenSpp=gsub(&#39;.*^&#39;, &#39;Iris_&#39;, Species)) ## note that I am overwriting iris1. Use with caution summarize() calculates means, sd, min, max, etc. on a dataset iris1 %&gt;% summarize(mean(Petal.Length)) ## mean of Petal.Length in dplyr ## # A tibble: 1 × 1 ## `mean(Petal.Length)` ## &lt;dbl&gt; ## 1 3.76 mean(iris1$Petal.Length) ## mean of Petal.Length in base R ## [1] 3.758 Here we summarize lnPS.Len by Species with both Tidyverse and base R: means_PetLen1 &lt;- iris1 %&gt;% group_by(Species) %&gt;% summarize(Petal.Length=mean(Petal.Length)) ## tidy code means_PetLen2 &lt;- aggregate(Petal.Length~Species, FUN=&quot;mean&quot;, data=iris1) ## base R Here we summarize multiple variables by species use summarize_all() means1 &lt;- iris1 %&gt;% select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width,lnPS.Len, Species) %&gt;% group_by(Species) %&gt;% summarize_all(list(mean=mean,sd=sd,n=length)) means1 ## # A tibble: 3 × 16 ## Species Sepal.Length_me… Sepal.Width_mean Petal.Length_me… Petal.Width_mean ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.01 3.43 1.46 0.246 ## 2 versicolor 5.94 2.77 4.26 1.33 ## 3 virginica 6.59 2.97 5.55 2.03 ## # … with 11 more variables: lnPS.Len_mean &lt;dbl&gt;, Sepal.Length_sd &lt;dbl&gt;, ## # Sepal.Width_sd &lt;dbl&gt;, Petal.Length_sd &lt;dbl&gt;, Petal.Width_sd &lt;dbl&gt;, ## # lnPS.Len_sd &lt;dbl&gt;, Sepal.Length_n &lt;int&gt;, Sepal.Width_n &lt;int&gt;, ## # Petal.Length_n &lt;int&gt;, Petal.Width_n &lt;int&gt;, lnPS.Len_n &lt;int&gt; 3.1.3 Reshape data for better usability Here is how we reshape data from wide to long: iris_long &lt;- iris1 %&gt;% group_by(Species) %&gt;% pivot_longer(cols=c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, lnPS.Len), names_to = &#39;Trait&#39;, values_to = &#39;value&#39;) head(iris_long) ## # A tibble: 6 × 7 ## # Groups: Species [1] ## Species Plant PetSep.Length Genus GenSpp Trait value ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 setosa 1 6.5 Iris Iris_setosa Sepal.Length 5.1 ## 2 setosa 1 6.5 Iris Iris_setosa Sepal.Width 3.5 ## 3 setosa 1 6.5 Iris Iris_setosa Petal.Length 1.4 ## 4 setosa 1 6.5 Iris Iris_setosa Petal.Width 0.2 ## 5 setosa 1 6.5 Iris Iris_setosa lnPS.Len 1.87 ## 6 setosa 2 6.3 Iris Iris_setosa Sepal.Length 4.9 We can calculate the mean, sd, and n for each Species X trait combo and then calculate SE: means2 &lt;- iris_long %&gt;% group_by(Species,Trait) %&gt;% summarize(mean=mean(value), sd=sd(value), n=length(value)) %&gt;% mutate(se=sd/sqrt(n)) %&gt;% filter(Trait!=&#39;lnPS.Len&#39;) head(means2) ## # A tibble: 6 × 6 ## # Groups: Species [2] ## Species Trait mean sd n se ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 setosa Petal.Length 1.46 0.174 50 0.0246 ## 2 setosa Petal.Width 0.246 0.105 50 0.0149 ## 3 setosa Sepal.Length 5.01 0.352 50 0.0498 ## 4 setosa Sepal.Width 3.43 0.379 50 0.0536 ## 5 versicolor Petal.Length 4.26 0.470 50 0.0665 ## 6 versicolor Petal.Width 1.33 0.198 50 0.0280 Note that the previous code could all be done in one piped command: means2a &lt;- iris1 %&gt;% group_by(Species) %&gt;% pivot_longer(cols=c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, lnPS.Len), names_to = &#39;Trait&#39;, values_to = &#39;value&#39;) %&gt;% group_by(Species,Trait) %&gt;% summarize(mean=mean(value), sd=sd(value), n=length(value)) %&gt;% mutate(se=sd/sqrt(n)) %&gt;% filter(Trait!=&#39;lnPS.Len&#39;) means2a ## # A tibble: 12 × 6 ## # Groups: Species [3] ## Species Trait mean sd n se ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 setosa Petal.Length 1.46 0.174 50 0.0246 ## 2 setosa Petal.Width 0.246 0.105 50 0.0149 ## 3 setosa Sepal.Length 5.01 0.352 50 0.0498 ## 4 setosa Sepal.Width 3.43 0.379 50 0.0536 ## 5 versicolor Petal.Length 4.26 0.470 50 0.0665 ## 6 versicolor Petal.Width 1.33 0.198 50 0.0280 ## 7 versicolor Sepal.Length 5.94 0.516 50 0.0730 ## 8 versicolor Sepal.Width 2.77 0.314 50 0.0444 ## 9 virginica Petal.Length 5.55 0.552 50 0.0780 ## 10 virginica Petal.Width 2.03 0.275 50 0.0388 ## 11 virginica Sepal.Length 6.59 0.636 50 0.0899 ## 12 virginica Sepal.Width 2.97 0.322 50 0.0456 We can make plot, below are two plots to start with. One is ineffective and one is more effective. ggplot(data=means2, aes(x=Species, y=mean, fill=Trait)) + geom_point(size=5, position=position_dodge(width=0.25), pch=22) + labs(y=&quot;Floral part measurement (mm)&quot;) + geom_errorbar(aes(ymin=(mean-sd), ymax=(mean+sd)), width=.2, position=position_dodge(width=0.25), lwd=1.5) + scale_fill_viridis(discrete = T, labels=c(&quot;Petal Length&quot;,&quot;Petal Width&quot;, &quot;Sepal Length&quot;, &quot;Sepal Width&quot;), option=&quot;magma&quot;) + theme(panel.border=element_rect(color=&quot;black&quot;,size=2, fill=NA)) + xlab(&quot;Species&quot;) ggplot(data=iris_long %&gt;% filter(Trait!=&#39;lnPS.Len&#39;), aes(x=Species, y=value, fill=Species)) + geom_boxplot() + facet_wrap(~Trait, scales = &#39;free_y&#39;) + labs(y=&quot;Floral part measurement (mm)&quot;) + scale_fill_viridis(discrete = T, option = &quot;plasma&quot;, direction = -1, begin=.2) + theme_bw() 3.2 2B. Data Management Part 2 We are still using the Iris data set as well as the tidyverse. library(tidyverse) library(viridis) iris1 &lt;- as_tibble(iris) # load iris and convert to tibble Here we make plot of sepal.length by sepal.width in wide format: ggplot(data=iris1, aes(x=Sepal.Width, y=Sepal.Length)) + geom_point(color=&quot;#39568CFF&quot;) + ## color outside of aes() changes color of all points (ie. not mapped to a column) facet_wrap(~Species) + geom_smooth(method=&#39;lm&#39;,color=&quot;#39568CFF&quot;, fill=&quot;#39568CFF&quot;)+ theme_bw() We can reshape data for for comparing traits in different panels: ### reshape data from wide to long iris_long &lt;- iris1 %&gt;% group_by(Species) %&gt;% pivot_longer(cols=c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), names_to = &#39;Trait&#39;, values_to = &#39;value&#39;) head(iris_long) ## # A tibble: 6 × 3 ## # Groups: Species [1] ## Species Trait value ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 setosa Sepal.Length 5.1 ## 2 setosa Sepal.Width 3.5 ## 3 setosa Petal.Length 1.4 ## 4 setosa Petal.Width 0.2 ## 5 setosa Sepal.Length 4.9 ## 6 setosa Sepal.Width 3 Now we make a plot comparing species with traits on different panels: ggplot(data=iris_long , aes(x=Species, y=value, fill=Species)) + geom_boxplot() + facet_wrap(~Trait, scales = &#39;free_y&#39;) + labs(y=&quot;Floral part measurement (mm)&quot;) + scale_fill_viridis(discrete = T, option = &quot;plasma&quot;, direction = -1) + theme_bw() 3.3 2C. Data Exploration For data exploration we need to load the following libraries: library(tidyverse) library(agridat) library(corrplot) library(EnvStats) We will use the Iris dataset. data(iris) # load data (already exists in base R) iris[8,3] &lt;- 7 # plant data point for demo head(iris) # print first 6 lines of dataset ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa tail(iris) # print last 6 lines of dataset ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica Here we use str() to print the ‘structure’ of dataset giving you info about each column or we can use glimpse(). str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 7 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... glimpse(iris) # glimpse is similar to str() in tidyverse ## Rows: 150 ## Columns: 5 ## $ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.… ## $ Sepal.Width &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.… ## $ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 7.0, 1.4, 1.5, 1.5, 1.… ## $ Petal.Width &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.… ## $ Species &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s… 3.3.1 Distributions &amp; summary statistics We can view histograms of petal lengths with this: ggplot(iris, aes(x = Petal.Length)) + geom_histogram(bins=12, color=&quot;white&quot;) + theme_bw(base_size = 16) + geom_vline(aes(xintercept = mean(Petal.Length)), color = &quot;blue&quot;, size = 2) + geom_vline(aes(xintercept= median(Petal.Length)), color = &quot;orange&quot;, size = 2) We can also facet the histograms: ggplot(iris, aes(x = Petal.Length)) + geom_histogram(bins=12, color=&quot;white&quot;) + facet_wrap(~Species, scales=&quot;free&quot;) + theme_bw(base_size = 16) We can use the summary() to examine mean, median, and ranges. summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.400 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.795 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :7.000 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## We can also get a table of means and medians with this tidyverse code: iris %&gt;% pivot_longer(cols=c(1:4)) %&gt;% group_by(Species,name) %&gt;% summarize(mean=mean(value),median=median(value)) ## # A tibble: 12 × 4 ## # Groups: Species [3] ## Species name mean median ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa Petal.Length 1.57 1.5 ## 2 setosa Petal.Width 0.246 0.2 ## 3 setosa Sepal.Length 5.01 5 ## 4 setosa Sepal.Width 3.43 3.4 ## 5 versicolor Petal.Length 4.26 4.35 ## 6 versicolor Petal.Width 1.33 1.3 ## 7 versicolor Sepal.Length 5.94 5.9 ## 8 versicolor Sepal.Width 2.77 2.8 ## 9 virginica Petal.Length 5.55 5.55 ## 10 virginica Petal.Width 2.03 2 ## 11 virginica Sepal.Length 6.59 6.5 ## 12 virginica Sepal.Width 2.97 3 3.3.2 Examining for outliers Boxplots can be used to examine distribution and look for outliers: ggplot(iris, aes(x=Species, y = Petal.Length)) + geom_boxplot(fill=&quot;grey&quot;, width=.5) + facet_wrap(~Species, scales=&quot;free&quot;) + theme_bw(base_size = 16) We can also use a dixon test for outliers or other tests like the grubbs test or Rosner test (for multiple outliers): library(outliers) ## grubbs test for outliers, highest then lowest. Other functions EnvStats::rosnerTest() can test for multiple outliers grubbs.test(iris$Petal.Length) ## full dataset ## ## Grubbs test for one outlier ## ## data: iris$Petal.Length ## G = 1.80564, U = 0.97797, p-value = 1 ## alternative hypothesis: highest value 7 is an outlier grubbs.test(iris$Petal.Length[iris$Species==&#39;setosa&#39;]) ## just species setosa ## ## Grubbs test for one outlier ## ## data: iris$Petal.Length[iris$Species == &quot;setosa&quot;] ## G = 6.765525, U = 0.046807, p-value &lt; 2.2e-16 ## alternative hypothesis: highest value 7 is an outlier grubbs.test(iris$Petal.Length[iris$Species==&#39;setosa&#39;], opposite=T) ## test lower outlier for species setosa ## ## Grubbs test for one outlier ## ## data: iris$Petal.Length[iris$Species == &quot;setosa&quot;] ## G = 0.71295, U = 0.98941, p-value = 1 ## alternative hypothesis: lowest value 1 is an outlier Here we can remove outliers and remake boxplots. Filtering with “|” (OR) will select all observations where one condition is met but not the other. iris1 &lt;- iris %&gt;% filter(Petal.Length&lt;4 | !Species==&#39;setosa&#39;) Ploting data: ggplot(iris1, aes(x=Species, y = Petal.Length)) + geom_boxplot(fill=&quot;grey&quot;, width=.5) + facet_wrap(~Species, scales=&quot;free&quot;) + theme_bw(base_size = 16) 3.3.3 Explore relationships We can first use the GGally package. The ggpairs() code provides us with scatter plots that plot variables against one another in a pairwise fashion. We also see the distribution of the data and the correlation coefficients between a pair of variables library(GGally) ## install and load GGally package, if necessary ggpairs(iris1) ## Make a big panel plot for exploration!!! ggpairs(iris1, aes(color=Species, alpha=.75)) ## add color to seperate by species Alternative to ggpairs() is the cor() which can be better for quickly scanning complex datasets: iris_cor &lt;- cor(iris1 %&gt;% select(-Species) %&gt;% as.matrix()) ## first make correlation matrix corrplot(iris_cor, method = &quot;circle&quot;, type = &quot;upper&quot;) ## plots strength of correlation as color-coded circles "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
